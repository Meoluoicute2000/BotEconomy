const { MessageEmbed } = require('discord.js');
const Profile = require('../../Models/Profile');
const { createProfile } = require('../../Structures/Utils');

const keobuabaoCooldowns = new Map();

module.exports = {
  name: 'kbb',
  description: 'Ch∆°i tr√≤ ch∆°i k√©o b√∫a bao. H·∫°n ch·∫ø s·ª≠ d·ª•ng m·ªói 5 gi√¢y - R√∫t g·ªçn.',
  category: 'Gi·∫£i tr√≠',
  options: [
    {
      name: 'bet',
      description: 'S·ªë ti·ªÅn c∆∞·ª£c (t·ªëi ƒëa 50000 - th·∫•p nh·∫•t 1000).',
      required: true,
      type: 'INTEGER',
    },
    {
      name: 'choice',
      description: 'Ch·ªçn "K√©o", "B√∫a" ho·∫∑c "Bao".',
      required: true,
      type: 'STRING',
      choices: [
        { name: 'K√©o', value: 'k√©o' },
        { name: 'B√∫a', value: 'b√∫a' },
        { name: 'Bao', value: 'bao' },
      ],
    },
  ],
  async run({ interaction, bot, guild }) {
    const defaultBet = interaction.options.getInteger('bet') || 1000;

    const profile = await Profile.findOne({ UserID: interaction.user.id, GuildID: guild.id });
    if (!profile) {
      await createProfile(interaction.user, guild);
      return interaction.reply({
        embeds: [
          new MessageEmbed()
            .setColor('BLURPLE')
            .setDescription(`*ƒêang t·∫°o h·ªì s∆° c·ªßa b·∫°n. . .*\n \n**S·ª≠ d·ª•ng l·ªánh n√†y m·ªôt l·∫ßn n·ªØa ƒë·ªÉ ch∆°i K√©o B√∫a Bao.**`),
        ],
      });
    }

    if (keobuabaoCooldowns.has(interaction.user.id)) {
      const cooldownExpiration = keobuabaoCooldowns.get(interaction.user.id);
      if (Date.now() < cooldownExpiration) {
        const timeLeft = Math.ceil((cooldownExpiration - Date.now()) / 1000);
        return interaction.reply({
          embeds: [
            new MessageEmbed()
              .setColor('BLURPLE')
              .setDescription(`*B·∫°n c·∫ßn ph·∫£i ƒë·ª£i th√™m* **${timeLeft} gi√¢y** *tr∆∞·ªõc khi c√≥ th·ªÉ ch∆°i l·∫°i.*`),
          ],
        });
      }
    }

    const playerChoice = interaction.options.getString('choice').toLowerCase();

    const botChoice = getRandomChoice();

    const result = determineWinner(playerChoice, botChoice);

    let amountWon = 0;
    let amountLost = 0;
    if (result === 'Th·∫Øng') {
      amountWon = defaultBet * 2;
      await updateWallet(interaction.user.id, guild.id, amountWon - defaultBet);
    } else if (result === 'Thua') {
      amountLost = defaultBet;
      await updateWallet(interaction.user.id, guild.id, -amountLost);
    }

    const embed = new MessageEmbed()
      .setColor('BLURPLE')
      .setTitle(`K·∫øt qu·∫£ tr√≤ ch∆°i K√©o B√∫a Bao c·ªßa **Nh√† C√°i**`)
      .setDescription(`**üí∏ Ti·ªÅn C∆∞·ª£c:** ${defaultBet} :coin:.\n\n**üçí B·∫°n Ch·ªçn:** ${playerChoice}\n**üèõ Nh√† C√°i Ch·ªçn:** ${botChoice}\n\n**üß© K·∫øt Qu·∫£:** ${result.charAt(0).toUpperCase() + result.slice(1)}`);

    interaction.reply({ embeds: [embed] });

    const cooldownDuration = 5 * 1000; // 5 gi√¢y
    keobuabaoCooldowns.set(interaction.user.id, Date.now() + cooldownDuration);
  },
};

async function updateWallet(userID, guildID, amount) {
  const updatedProfile = await Profile.findOneAndUpdate(
    { UserID: userID, GuildID: guildID, Wallet: { $gte: Math.abs(amount) } },
    { $inc: { Wallet: amount } },
    { new: true }
  );

  if (!updatedProfile) {
    throw new Error('**S·ªë d∆∞ c·ªßa b·∫°n kh√¥ng ƒë·ªß ƒë·ªÉ ch∆°i `Kbb` :coin: :coin: :coin:\n \n Vui l√≤ng s·ª≠ d·ª•ng l·ªánh `Work` hay nh·∫≠n ti·ªÅn h√†ng ng√†y ƒë·ªÉ ch∆°i.**');
  }
}

function getRandomChoice() {
  const choices = ['k√©o', 'b√∫a', 'bao'];
  return choices[Math.floor(Math.random() * choices.length)];
}

function determineWinner(playerChoice, botChoice) {
  if (
    (playerChoice === 'k√©o' && botChoice === 'bao') ||
    (playerChoice === 'b√∫a' && botChoice === 'k√©o') ||
    (playerChoice === 'bao' && botChoice === 'b√∫a')
  ) {
    return 'Th·∫Øng';
  } else if (playerChoice === botChoice) {
    return 'H√≤a';
  } else {
    return 'Thua';
  }
}
