const { MessageEmbed } = require('discord.js');
const Profile = require('../../Models/Profile');
const { createProfile } = require('../../Structures/Utils');

const BaibacayCooldowns = new Map();

module.exports = {
  name: 'bbc',
  description: 'R√∫t 3 c√¢y b√†i v√† t√≠nh ƒëi·ªÉm cao nh·∫•t. H·∫°n ch·∫ø s·ª≠ d·ª•ng m·ªói 5 gi√¢y - R√∫t g·ªçn.',
  category: 'Kinh t·∫ø',
  options: [
    {
      name: 'bet',
      description: 'S·ªë ti·ªÅn c∆∞·ª£c (t·ªëi ƒëa 50000 - m·∫∑c ƒë·ªãnh l√† 1000).',
      required: false,
      type: 'INTEGER'
    }
  ],
  async run({ interaction, bot, guild }) {
    if (BaibacayCooldowns.has(interaction.user.id)) {
      const cooldownExpiration = BaibacayCooldowns.get(interaction.user.id);
      if (Date.now() < cooldownExpiration) {
        const timeLeft = Math.ceil((cooldownExpiration - Date.now()) / 1000);
        return interaction.reply({
          embeds: [
            new MessageEmbed()
              .setColor('BLURPLE')
              .setTitle(`R√∫t Ba L√° B√†i c·ªßa **${interaction.user.username}**`)
              .setDescription(`*B·∫°n c·∫ßn ph·∫£i ƒë·ª£i th√™m* **${timeLeft} gi√¢y** *tr∆∞·ªõc khi c√≥ th·ªÉ r√∫t l·∫°i 3 b√†i.*`)
          ],
        });
      }
    }

    const inputBet = interaction.options.getInteger('bet');
    const defaultBet = 1000;
    const bet = (inputBet && inputBet >= 1000 && inputBet <= 50000) ? inputBet : defaultBet;

    if (bet < 1000 || bet > 50000) {
      return interaction.reply({
        embeds: [
          new MessageEmbed()
            .setColor('BLURPLE')
            .setDescription('**Gi·ªõi h·∫°n c·ªßa l∆∞·ª£t r√∫t b√†i l√† 50000 :coin:.**')
        ],
      });
    }

    const cooldownDuration = 5 * 1000; // 5 gi√¢y
    BaibacayCooldowns.set(interaction.user.id, Date.now() + cooldownDuration);

    const cards = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];
    const hand = Array.from({ length: 3 }, () => cards[Math.floor(Math.random() * cards.length)]);

    const points = hand.reduce((total, card) => {
      if (card === 'A') {
        return total + 11; //A l√† 11 ƒëi·ªÉm
      } else if (['K', 'Q', 'J'].includes(card)) {
        return total + 10;
      } else {
        return total + parseInt(card);
      }
    }, 0);

    const houseHand = Array.from({ length: 3 }, () => cards[Math.floor(Math.random() * cards.length)]);
    const housePoints = houseHand.reduce((total, card) => {
      if (card === 'A') {
        return total + 11; // Gi·∫£ s·ª≠ A l√† 11 ƒëi·ªÉm
      } else if (['K', 'Q', 'J'].includes(card)) {
        return total + 10;
      } else {
        return total + parseInt(card);
      }
    }, 0);

    let result;
    if (points % 10 > housePoints % 10) {
      result = 'B·∫°n Th·∫Øng!';
      const updatedProfile = await Profile.findOneAndUpdate(
        { UserID: interaction.user.id, GuildID: guild.id },
        { $inc: { Wallet: bet } },
        { new: true }
      );
    } else if (points % 10 < housePoints % 10) {
      result = 'B·∫°n Thua!';
      const updatedProfile = await Profile.findOneAndUpdate(
        { UserID: interaction.user.id, GuildID: guild.id, Wallet: { $gte: bet } },
        { $inc: { Wallet: -bet } },
        { new: true }
      );
      if (!updatedProfile) {
        return interaction.reply({
          embeds: [
            new MessageEmbed()
              .setColor('BLURPLE')
              .setDescription('**S·ªë d∆∞ c·ªßa b·∫°n kh√¥ng ƒë·ªß ƒë·ªÉ ch∆°i `Bbc` :coin: :coin: :coin:\n \n Vui l√≤ng s·ª≠ d·ª•ng l·ªánh `Work` hay nh·∫≠n ti·ªÅn h√†ng ng√†y ƒë·ªÉ ch∆°i.**')
          ],
        });
      }
    } else {
      result = 'H√≤a!';
    }

    const embed = new MessageEmbed()
      .setColor('BLURPLE')
      .setTitle(`R√∫t 3 L√° B√†i c·ªßa **${interaction.user.username}**`)
      .setDescription(`**üçíB√†i C·ªßa B·∫°n:** ${hand.join(' | ')}\n**üçí ƒêi·ªÉm C·ªßa B·∫°n:** ${points % 10}\n\n**üèõ B√†i Nh√† C√°i:** ${houseHand.join(' | ')}\n**üèõ ƒêi·ªÉm Nh√† C√°i:** ${housePoints % 10}\n\n**üÉè K·∫øt Qu·∫£:** ${result}\n**üíµ Ti·ªÅn ƒê√£ C∆∞·ª£c:** ${bet} :coin:.`);

    await interaction.reply({ embeds: [embed] });
  }
};
