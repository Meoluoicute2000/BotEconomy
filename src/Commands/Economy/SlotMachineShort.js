const { MessageEmbed } = require('discord.js');
const Profile = require('../../Models/Profile');
const { createProfile } = require('../../Structures/Utils');

const slotmachineCooldowns = new Map();

module.exports = {
  name: 'slot',
  description: 'Quay m√°y ƒë√°nh b·∫°c Slot Machine. H·∫°n ch·∫ø s·ª≠ d·ª•ng m·ªói 5 gi√¢y - R√∫t g·ªçn.',
  category: 'Kinh t·∫ø',
  options: [
    {
      name: 'bet',
      description: 'S·ªë ti·ªÅn c∆∞·ª£c (t·ªëi ƒëa 50000 - m·∫∑c ƒë·ªãnh l√† 1000).',
      required: false,
      type: 'INTEGER'
    }
  ],
  async run({ interaction, bot, guild }) {
    const profile = await Profile.findOne({ UserID: interaction.user.id, GuildID: guild.id });
    if (!profile) {
      await createProfile(interaction.user, guild);
      await interaction.reply({
        embeds: [
          new MessageEmbed()
            .setColor('BLURPLE')
            .setDescription(`*ƒêang t·∫°o h·ªì s∆° c·ªßa b·∫°n. . .*\n \n**S·ª≠ d·ª•ng l·ªánh n√†y m·ªôt l·∫ßn n·ªØa ƒë·ªÉ quay m√°y ƒë√°nh b·∫°c.**`)
        ]
      });
    } else {
      if (slotmachineCooldowns.has(interaction.user.id)) {
        const cooldownExpiration = slotmachineCooldowns.get(interaction.user.id);
        if (Date.now() < cooldownExpiration) {
          const timeLeft = Math.ceil((cooldownExpiration - Date.now()) / 1000);
          return interaction.reply({
            embeds: [
              new MessageEmbed()
                .setColor('BLURPLE')
                .setTitle(`M√°y ƒê√°nh B·∫°c Slot Machine c·ªßa **${interaction.user.username}**`)
                .setDescription(`*B·∫°n c·∫ßn ph·∫£i ƒë·ª£i th√™m* **${timeLeft} gi√¢y** *tr∆∞·ªõc khi c√≥ th·ªÉ quay m√°y ƒë√°nh b·∫°c c·ªßa b·∫°n.*`)
            ],
          });
        }
      }

      const inputBet = interaction.options.getInteger('bet');
      const defaultBet = 1000;
      const bet = (inputBet && inputBet >= 1000 && inputBet <= 50000) ? inputBet : defaultBet;
      if (bet < 1000 || bet > 50000) {
        return interaction.reply({
          embeds: [
            new MessageEmbed()
              .setColor('BLURPLE')
              .setDescription('**Gi·ªõi h·∫°n c·ªßa l∆∞·ª£t quay l√† 50000 :coin:.**')
          ],
        });
      }

      const cooldownDuration = 5 * 1000; // 5 gi√¢y
      slotmachineCooldowns.set(interaction.user.id, Date.now() + cooldownDuration);

      const fruits = ['üçí', 'üçã', 'üçì', 'üçá', 'üçâ', 'üçç', 'üçé', 'ü•í', 'üçê', 'üå∂', 'ü•ï', 'üçÜ', 'üçå', 'üçä', 'üçà', 'ü•ù', 'üçÄ', '‚òò', 'üí£']; //16 lo·∫°i qu·∫£ , 3 lo·∫°i qu·∫£ ƒë·∫∑c bi·ªát^^.
      const result = [fruits[Math.floor(Math.random() * fruits.length)], fruits[Math.floor(Math.random() * fruits.length)], fruits[Math.floor(Math.random() * fruits.length)]];

      let winnings = -bet;

      if (new Set(result).size === 3 && !['üí£', 'üçÄ', '‚òò'].some(icon => result.includes(icon))) {
        winnings = -bet * 1;
      } else if (new Set(result).size === 2) {
        winnings = bet * 2;
      } else if (new Set(result).size === 1) {
        winnings = bet * 10;
      }

      const specialIcons = ['‚òò', 'üçÄ', 'üí£'];

      for (const icon of specialIcons) {
        const iconCount = result.filter(element => element === icon).length;

        switch (icon) {
          case '‚òò':
            if (iconCount === 1) {
              winnings += 1000;
            } else if (iconCount === 2) {
              winnings += 3000;
            } else if (iconCount === 3) {
              winnings += 5000;
            }
            break;
          case 'üçÄ':
            if (iconCount === 1) {
              winnings *= -3;
            } else if (iconCount === 2) {
              winnings *= -6;
            } else if (iconCount === 3) {
              winnings *= -9;
            }
            break;
          case 'üí£':
            if (iconCount === 1) {
              winnings -= 1000;
            } else if (iconCount === 2) {
              winnings -= 3000;
            } else if (iconCount === 3) {
              winnings -= 5000;
            }
            break;
          default:
            break;
        }
      }

      const doubleFruitIcons = ['‚òò', 'üçÄ', 'üí£'];
      const doubleFruitBonus = 2000;

      for (const doubleFruit of doubleFruitIcons) {
        const doubleFruitCount = result.filter(element => element === doubleFruit).length;

        if (doubleFruitCount === 2) {
          switch (doubleFruit) {
            case '‚òò':
              winnings += -2000;
              break;
            case 'üçÄ':
              winnings += -3000;
              break;
            case 'üí£':
              winnings -= -1000;
              break;
            default:
              break;
          }
        }
      }

      const updatedProfile = await Profile.findOneAndUpdate(
        { UserID: interaction.user.id, GuildID: guild.id, Wallet: { $gte: bet } },
        { $inc: { Wallet: winnings } },
        { new: true }
      );

      if (!updatedProfile) {
        return interaction.reply({
          embeds: [
            new MessageEmbed()
              .setColor('BLURPLE')
              .setDescription('**S·ªë d∆∞ c·ªßa b·∫°n kh√¥ng ƒë·ªß ƒë·ªÉ ch∆°i `Slot`. Vui l√≤ng s·ª≠ d·ª•ng l·ªánh `Work` hay nh·∫≠n ti·ªÅn h√†ng ng√†y ƒë·ªÉ ch∆°i.**')
          ],
        });
      }

      const embed = new MessageEmbed()
        .setColor('BLURPLE')
        .setTitle(`M√°y ƒê√°nh B·∫°c Slot Machine c·ªßa **${interaction.user.username}**`)
        .setDescription(`**üé∞ K·∫øt Qu·∫£:**\n*${result[0]}* | *${result[1]}* | *${result[2]}* \n\n**üí∞ Ti·ªÅn Nh·∫≠n ƒê∆∞·ª£c:** ${winnings} :coin:`);

      await interaction.reply({ embeds: [embed] });
    }
  }
};
