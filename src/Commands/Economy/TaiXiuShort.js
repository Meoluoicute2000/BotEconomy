const { MessageEmbed } = require('discord.js');
const Profile = require('../../Models/Profile');
const { createProfile } = require('../../Structures/Utils');

const taixiuCooldowns = new Map();

module.exports = {
  name: 'tx',
  description: 'Ch∆°i tr√≤ ch∆°i T√†i X·ªâu v·ªõi 3 con x√∫c x·∫Øc. H·∫°n ch·∫ø s·ª≠ d·ª•ng m·ªói 30 gi√¢y - R√∫t g·ªçn.',
  category: 'Kinh t·∫ø',
  options: [
    {
      name: 'bet',
      description: 'S·ªë ti·ªÅn c∆∞·ª£c (t·ªëi ƒëa 50000 - th·∫•p nh·∫•t 1000).',
      required: true,
      type: 'INTEGER',
    },
    {
      name: 'choice',
      description: 'Ch·ªçn "T√†i" ho·∫∑c "X·ªâu".',
      required: true,
      type: 'STRING',
      choices: [
        { name: 'T√†i', value: 'T√†i' },
        { name: 'X·ªâu', value: 'X·ªâu' },
      ],
    },
  ],
  async run({ interaction, bot, guild }) {
    if (taixiuCooldowns.has(interaction.user.id)) {
      const cooldownExpiration = taixiuCooldowns.get(interaction.user.id);
      if (Date.now() < cooldownExpiration) {
        const timeLeft = Math.ceil((cooldownExpiration - Date.now()) / 1000);
        return interaction.reply({
          embeds: [
            new MessageEmbed()
              .setColor('BLURPLE')
              .setTitle(`Tr√≤ ch∆°i T√†i X·ªâu c·ªßa **${interaction.user.username}**`)
              .setDescription(`*B·∫°n c·∫ßn ph·∫£i ƒë·ª£i th√™m* **${timeLeft} gi√¢y** *tr∆∞·ªõc khi c√≥ th·ªÉ ch∆°i l·∫°i.*`),
          ],
        });
      }
    }

    const inputBet = interaction.options.getInteger('bet');
    const defaultBet = 1000;
    const bet = (inputBet && inputBet >= 1000 && inputBet <= 50000) ? inputBet : defaultBet;

    if (bet < 1000 || bet > 50000) {
      return interaction.reply({
        embeds: [
          new MessageEmbed()
            .setColor('BLURPLE')
            .setDescription('**Gi·ªõi h·∫°n c·ªßa l∆∞·ª£t ch∆°i l√† 50000 :coin:.**'),
        ],
      });
    }

    const cooldownDuration = 30 * 1000; // 30 gi√¢y
    taixiuCooldowns.set(interaction.user.id, Date.now() + cooldownDuration);

    const dice1 = rollDice();
    const dice2 = rollDice();
    const dice3 = rollDice();

    const totalPoints = dice1 + dice2 + dice3;

    let result;
    if (totalPoints >= 4 && totalPoints <= 10) {
      result = 'X·ªâu';
    } else if (totalPoints >= 11 && totalPoints <= 17) {
      result = 'T√†i';
    } else {
      result = 'lose';
    }

    let payoutMultiplier;
    if (result === interaction.options.getString('choice')) {
      payoutMultiplier = 10; 
    } else {
      payoutMultiplier = 0; 
    }

    const winnings = bet * payoutMultiplier;
    const losses = (result === interaction.options.getString('choice')) ? 0 : bet;

    try {
      if (result === interaction.options.getString('choice')) {
        await updateWallet(interaction.user.id, guild.id, winnings - bet); 
        await updateWallet(interaction.user.id, guild.id, -losses); 
      }
    } catch (error) {
      return interaction.reply({
        embeds: [
          new MessageEmbed()
            .setColor('BLURPLE')
            .setDescription('**S·ªë d∆∞ c·ªßa b·∫°n kh√¥ng ƒë·ªß ƒë·ªÉ ch∆°i `Taixiu` :coin: :coin: :coin:\n \n Vui l√≤ng s·ª≠ d·ª•ng l·ªánh `Work` hay nh·∫≠n ti·ªÅn h√†ng ng√†y ƒë·ªÉ ch∆°i.**'),
        ],
      });
    }

    const embed = new MessageEmbed()
      .setColor('BLURPLE')
      .setTitle(`Tr√≤ ch∆°i T√†i X·ªâu c·ªßa **${interaction.user.username}**`)
      .setDescription(`**üé≤ X√∫c x·∫Øc:** üé≤ ${dice1} | üé≤ ${dice2} | üé≤ ${dice3}\n**üé≤T·ªïng ƒêi·ªÉm:** ${totalPoints}\n \n**üèõ K·∫øt Qu·∫£ T√†i X·ªâu:** ${result}\n**üçí L·ª±a Ch·ªçn:** ${interaction.options.getString('choice')}\n \n**üíµ Ti·ªÅn C∆∞·ª£c:** ${bet} :coin:\n**üí∞ S·ªë Ti·ªÅn Th·∫Øng:** ${winnings} :coin:\n**üí∏ S·ªë Ti·ªÅn Thua:** ${losses} :coin:`);

    interaction.reply({ embeds: [embed] });
  },
};

function rollDice() {
  return Math.floor(Math.random() * 6) + 1;
}

async function updateWallet(userID, guildID, amount) {
  const updatedProfile = await Profile.findOneAndUpdate(
    { UserID: userID, GuildID: guildID, Wallet: { $gte: Math.abs(amount) } },
    { $inc: { Wallet: amount } },
    { new: true }
  );

  if (!updatedProfile) {
    throw new Error('**S·ªë d∆∞ c·ªßa b·∫°n kh√¥ng ƒë·ªß ƒë·ªÉ ch∆°i `Tx` :coin: :coin: :coin:\n \n Vui l√≤ng s·ª≠ d·ª•ng l·ªánh `Work` hay nh·∫≠n ti·ªÅn h√†ng ng√†y ƒë·ªÉ ch∆°i.**');
  }
}
